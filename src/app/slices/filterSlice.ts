

import { createAsyncThunk, createSlice, current, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
// import { fetchCount } from './counterAPI';



//Test filters.... Ehhh






export interface ListState {
  filter: {
    filterType: "general" | "language", //view mode/BrowseByLang page
    genreOption: string, //genre name
    sortOption: 0 | 1 | 2 | 3, // 1)Suggested for you, 2) year Released, 3)Votes Desc, 4)Votes Asc
    type: "movie" | "tv",
    languageType: "original" | "dubbing" | "subtitles"
    languageOption: string // languages
  }
  viewMode: "full" | "tiles"
}

const initialState: ListState = {
  filter: { filterType: "general", genreOption: "", sortOption: 0, type: "tv", languageOption: "English", languageType: "original" },
  viewMode: "full"
};


// updateFilter: Function(),
//  updateViewMode: Function()

export const filterSlice = createSlice({
  name: 'filter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateFilter: (state, action) => {
      const { type, value } = action.payload
      console.log(type)

      if (type === "filterType") state.filter.filterType = value;
      if (type === "genreOption") state.filter.genreOption = value;
      if (type === "sortOption") state.filter.sortOption = value;
      if (type === "type") state.filter.type = value;
      if (type === "languageOption") state.filter.languageOption = value;
      if (type === "languageType") state.filter.languageType = value;

    },

    updateViewMode: (state, action) => {
      state.viewMode = action.payload
    }


    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  // }
});

export const { updateFilter, updateViewMode } = filterSlice.actions
// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getFilters = (state: RootState) => state.filter.filter;
export const getViewMode = (state: RootState) => state.filter.viewMode;

// export const selectShowsInMyList = (state: RootState) => state.filter.myList;




// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };

export default filterSlice.reducer;

