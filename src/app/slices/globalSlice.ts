import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';

export interface GlobalState {
  previewData: {},
  isPreviewShowing: boolean,
  showTileActive: boolean,
  forceTileClosed: boolean
}

const initialState: GlobalState = {
  previewData: {},
  isPreviewShowing: false,
  showTileActive: false,
  forceTileClosed: false,
};

export const globalSlice = createSlice({
  name: 'global',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPreviewData: (state, action) => {
      state.previewData = action.payload;
      state.isPreviewShowing = true;
    },

    closePreview: (state) => {
      state.isPreviewShowing = false;
      state.previewData = {}
    },

    setShowTileActive: (state, action) => {
      state.showTileActive = action.payload
    },

    setForceTileClosed: (state, action) => {
      state.forceTileClosed = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  // }
});

export const { setPreviewData, closePreview, setShowTileActive, setForceTileClosed } = globalSlice.actions
// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getPreviewData = (state: RootState) => state.global.previewData
export const isPreviewShowing = (state: RootState) => state.global.isPreviewShowing
export const isShowTileActive = (state: RootState) => state.global.showTileActive
export const forceTileClosed = (state: RootState) => state.global.forceTileClosed


// export const selectShowsInMyList = (state: RootState) => state.filter.myList;




// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCount(getState());
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//       }
//     };

export default globalSlice.reducer;

